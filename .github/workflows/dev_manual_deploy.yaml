# Sample GitHub Actions CICD
# see https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions for more info
name: "Dev: Manual Deploy"
run-name: ${{ github.actor }} is deploying to DEV üöÄ
on:
    workflow_dispatch:
      inputs:
        commit_hash:
          description: "The commit hash to check out"
permissions:
  id-token: write   # This is required for requesting the JWT for auth with AWS
  contents: read    # This is required for actions/checkout
env:
  APP_NAME: chat-app
  BUILD_ARTIFACT_PATH: s3://dev-vera-ui-artifacts/chat-app/
  STATIC_SITE_BUCKET: s3://dev-vera-chat-app/
  BUILD_DIR: dist/
jobs:
  # first job is to just run tests, no multi platform build
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      # summary
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # checkout code
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
            ref: ${{ github.event.inputs.commit_hash }}
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # aws config
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::769378065131:role/GithubActionsRole
          role-session-name: cicdsession
          aws-region: us-east-2
      - name: Log AWS role being used
        run: aws sts get-caller-identity


      
      # create tag using commit
      - name: Get version tag from package.json
        run: echo "VERSION=$(cat package.json| jq -r .version)" >> $GITHUB_ENV
      - name: Create SHA Tag
        run: echo "SHA_TAG=${VERSION}.${GITHUB_SHA:0-7}" >> $GITHUB_ENV
      - name: Echo tags
        run: echo "Building version ${{ env.VERSION }} with tag ${{ env.SHA_TAG }}"
      - name: Set S3 build artifact path
        run: |
            echo "ARTIFACT_FILENAME=$(echo '${{ env.APP_NAME }}_${{ env.SHA_TAG }}.tar.gz')" >> $GITHUB_ENV
            echo "ARTIFACT_S3_PREFIX=$(echo '${{ env.BUILD_ARTIFACT_PATH }}${{ env.SHA_TAG }}')" >> $GITHUB_ENV

      # BUILD & TEST
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js 21
        uses: actions/setup-node@v3
        with:
          node-version: 21
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install
      # - name: Run tests
      #   run: pnpm test
      - name: Build
        run: pnpm build:dev
    
      ## UPLOAD TO S3
      - name: Upload Artifact
        run: |
            tar -czf ${{ env.ARTIFACT_FILENAME }} ${{ env.BUILD_DIR }}
            echo "Uploading ${{ env.ARTIFACT_FILENAME }} to ${{ env.ARTIFACT_S3_PREFIX }}/"
            aws s3 cp ${{ env.ARTIFACT_FILENAME }} ${{ env.ARTIFACT_S3_PREFIX }}/${{ env.ARTIFACT_FILENAME }}
            echo $SHA_TAG >> commit.txt
            aws s3 cp commit.txt ${{ env.ARTIFACT_S3_PREFIX }}/commit.txt

      - run: echo "üçè This job's status is ${{ job.status }}."
    outputs:
      artifact_uri: ${{ env.ARTIFACT_S3_PREFIX }}/${{ env.ARTIFACT_FILENAME }}

  deploy_to_dev:
    runs-on: ubuntu-latest
    needs: build_and_test
    # only run on pushes to main branch (aka merging a PR)
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Check out repository code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::769378065131:role/GithubActionsRole
          role-session-name: cicdsession
          aws-region: us-east-2
      
      - name: Download Artifact
        run: |
            aws s3 cp ${{ needs.build_and_test.outputs.artifact_uri }} artifact.tar.gz
            tar -xzf artifact.tar.gz ${{ env.BUILD_DIR }}
      
      - name: Deploy
        run: aws s3 sync ${{ env.BUILD_DIR }} ${{ env.STATIC_SITE_BUCKET }} --delete
